
// Declaracion de variables.
<decl_var> ::= <tipo> <identificador>

<tipo> ::= int | long | char | float | bool | <tipo_def>
<tipo_def> ::= struct | union <identificador>

// Declaracion de tipos.

<decl_tipo> ::= ( struct | union ) <identificador> '{' <list_decl> '}'
<list_decl> ::= <decl_var> | ( <decl_var> <list_decl> )

// Alias

<alias> ::= typedef <tipo> <identificador>

// Bloques

<bloque> ::= { <instruccion> }
<instruccion> ::= <elem_local> | <elem_local> <instruccion> | <bloque> | <estr_control> | <estr_control> <instruccion>

<estr_control> ::= <if> | <if_else> | <for> | <while>

<if> ::= if '(' <operacion> ')' <bloque>

<if-else> ::= if '(' <operacion> ')' <bloque> else <bloque>

<while> ::= while '(' <operacion> ')' <bloque>

<for> ::= for '(' <operacion> ; <operacion> ; <operacion> ) <bloque>

<funcion> ::= ( <tipo> | void ) <identificador> '(' <params> ')' <bloque>

<params> ::= void | <list_param>

<list_param> ::= <decl_var> { , <list_param> }

// Precedencia de operadores

++, --          //Izq
()              //Izq Llamada a funcion
[]              //Izq
@               //Izq
+, -            //Der, Unarios
!               //Der
*, /, %         //Izq
+, -            //Izq
<, <=, >, >=    //Izq
==, !=,         //Izq
&&              //Izq
||              //Izq
=               //Der

// Operaciones

<assign> ::= ( <identificador> = <assign> ) | <or>
<or> ::= <and> { <or_op> <Or> }
<and> ::= <eq> { <and_op> <And> }
<eq> ::= <rel> { <eq_op> <eq> }
<rel> ::= <sum> { <rel_op> <sum> }
<sum> ::= <mult> { <sum_op> <sum> }
<mult> ::= <not> { <mult_op> <mult> }
<not> ::= ( !<not> ) | <sign>
<sign> ::= ( <sum_op> < sign> ) | <at>
<at> ::= <array> { @ <at> }
<array> ::= <func> '[' <assign> ']'
<func> ::= <post> '(' <args> ')'
<post> ::= <value> <post_op>
<value> ::= '(' <assign> ')' | <constant> | <identificdor>

<args> ::= <assign> { , <args> }

<constant> ::= <int_c> | <float_c> | <char_c> | <true_k> | <false_k>


Podemos tener dos ambitos principales, el ambito global y el ambito dentro de una funcion, el cual
incluye a todos los ambitos internos (estructuras de control y bloques internos...)

En el ambito global podemos tener:
- Declaracion de estructuras / uniones. (struct|union)
- Declaracion de aliases (typedef)
- Posiblemente variables globales (No esta concreto todavia).
- Definici√≥n de una funcion.

Al definir una funcion, es obligatorio abrir un bloque, y dentro de las posibles instrucciones que
podemos tener dentro de una funcion estan...
- Declaracion de variables.
- Una operacion.
- Una estructura de control.
- Un bloque.

<global> ::= <elem_global> | <elem_global> <global>
             
<elem_global> ::= ( <declaracion_global> | <funcion> )

<declaracion_global> ::= ( <decl_tipo> | <alias> ) ;

<elem_local> ::= ( <assign> | <decl_var> ) ;
